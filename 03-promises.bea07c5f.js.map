{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAChCC,EAAUF,SAASC,cAAc,kBACjCE,EAASH,SAASC,cAAc,iBAChCG,EAAWJ,SAASC,cAAc,mBA2BxC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EAEFI,EAAQ,C,SAAEN,E,MAAUC,IAGpBM,EAAO,C,SAACP,E,MAAUC,GAAO,GAE1BA,EAAM,G,CApCbR,EAAOgB,iBAAiB,UAAUC,IAChCA,EAAMC,iBACN,IAAIC,EAAS,EACTC,EAAYC,OAAOlB,EAAQmB,OAC3BC,EAAOF,OAAOjB,EAAOkB,OACrBE,EAAOJ,EAAYG,EACvB,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,OAAOhB,EAASiB,OAAQG,GAAK,EAC/CN,EAAQ,EACRK,GAAQD,EACRjB,EAAca,EAAQK,GACrBE,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBmB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAqBtB,QAAiBC,OAExCsB,QAAQC,IAAI,uBAAqBxB,QAAiBC,MAAU,IAE7DwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBmB,EAAA7B,GAAS8B,OAAOK,QACd,sBAAoB1B,QAAiBC,OAEvCsB,QAAQC,IAAI,sBAAoBxB,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst delayEl = document.querySelector('[name=\"delay\"]');\nconst stepEl = document.querySelector('[name=\"step\"]');\nconst amountEl = document.querySelector('[name=\"amount\"]');\n\nformEl.addEventListener('submit', event => {\n  event.preventDefault();\n  let amount = 0;\n  let timeDelay = Number(delayEl.value);\n  let step = Number(stepEl.value);\n  let time = timeDelay - step;\n  for (let i = 0; i < Number(amountEl.value); i += 1) {\n    amount =+ 1;\n    time += step;\n    createPromise(amount, time)\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(\n        `✅ Fulfilled promise ${position} in ${delay}ms`\n      );\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(\n        `❌ Rejected promise ${position} in ${delay}ms`\n      );\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({position, delay});\n      }\n    }, delay);\n  });\n }\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$delayEl","$47d4ff9957288465$var$stepEl","$47d4ff9957288465$var$amountEl","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","amount","timeDelay","Number","value","step","time","i","then","$parcel$interopDefault","Notify","success","console","log","catch","failure"],"version":3,"file":"03-promises.bea07c5f.js.map"}